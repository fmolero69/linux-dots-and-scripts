#!/bin/bash

function limpiar_cache() {
     # Función principal de limpieza
    while true; do
        clear
        echo -e "\e[1;34m=== Menú de Limpieza ===\e[0m"
        echo -e "\n\e[1;33mOpciones disponibles:\e[0m"
        echo "1) Ver contenido de la caché"
        echo "2) Gestionar caché de paquetes"
        echo "3) Gestionar paquetes huérfanos"
        echo "4) Ver espacio en disco"
        echo "5) Salir del programa"
        
        read -p "Seleccione una opción [1-5]: " main_option
        
        case $main_option in
            1) 
                ver_contenido_cache
                ;;
            2)
                gestionar_cache
                ;;
            3)
                gestionar_huérfanos
                ;;
            4)
                ver_espacio_disco
                ;;
           
            5)
                echo -e "\e[36mℹ  Saliendo del programa...\e[0m"
                break  # Sale del bucle while
                ;;
            *)
                echo -e "\e[31m✖  Opción inválida. Intente nuevamente.\e[0m"
                sleep 2
                ;;
        esac
         
        if [ "$main_option" -ge 1 ] && [ "$main_option" -le 4 ]; then
            read -p $'\n\e[1;33mPresione Enter para continuar...\e[0m' -r
        fi
    done
}

function ver_contenido_cache() {
    # Función para mostrar el contenido de la caché
    echo -e "\n\e[1;33m[Contenido de la Caché]\e[0m"
    echo -e "\e[36mℹ  Resumen de espacio utilizado:\e[0m"
    du -sh /var/cache/pacman/pkg/
    
    pkg_count=$(ls /var/cache/pacman/pkg/ | wc -l)
    if [ "$pkg_count" -eq 0 ]; then
        echo -e "\e[32m✔  La caché de paquetes está vacía.\e[0m"
        return
    fi
    
    echo -e "\n\e[36mℹ  Los 10 paquetes más grandes:\e[0m"
    du -h /var/cache/pacman/pkg/* | sort -hr | head -n 10 | awk '{print "• " $2 " (" $1 ")"}'
    
    echo -e "\n\e[36mℹ  Listado completo (últimos 10 modificados):\e[0m"
    ls -lt /var/cache/pacman/pkg/ | head -n 10 | awk '{print "• " $9}'
}

function gestionar_cache() {
    # Función para gestionar la caché de paquetes
    echo -e "\n\e[1;33m[Gestión de Caché de Paquetes]\e[0m"
    
    # Verificar si hay paquetes en caché
    pkg_count=$(ls /var/cache/pacman/pkg/ | wc -l)
    if [ "$pkg_count" -eq 0 ]; then
        echo -e "\e[32m✔  La caché de paquetes está vacía.\e[0m"
        return
    fi
    
    # Mostrar información de espacio
    echo -e "\e[36mℹ  Espacio utilizado:\e[0m"
    du -sh /var/cache/pacman/pkg/
    
    # Mostrar opciones de limpieza
    echo -e "\n\e[1;34mOpciones de limpieza:\e[0m"
    echo "1) Limpiar solo versiones antiguas (mantener actuales)"
    echo "2) Limpiar TODA la caché de paquetes"
    echo "3) Volver al menú de limpieza"
    
    read -p "Seleccione una opción [1-3]: " cache_option
    
    case $cache_option in
        1)
            echo -e "\e[34mℹ  Limpiando solo versiones antiguas...\e[0m"
            sudo pacman -Sc --noconfirm
            echo -e "\e[32m✔  Versiones antiguas eliminadas.\e[0m"
            ;;
        2)
            echo -e "\e[34mℹ  Limpiando TODA la caché de paquetes...\e[0m"
            sudo pacman -Scc --noconfirm
            echo -e "\e[32m✔  Caché limpiada completamente.\e[0m"
            ;;
        3)
            return
            ;;
        *)
            echo -e "\e[31m✖  Opción inválida.\e[0m"
            ;;
    esac
}

function gestionar_huérfanos() {
    # Función para gestionar paquetes huérfanos
    echo -e "\n\e[1;33m[Gestión de Paquetes Huérfanos]\e[0m"
    
    orphans=$(pacman -Qdtq | wc -l)
    if [ "$orphans" -gt 0 ]; then
        echo -e "\e[33m⚠  Se encontraron paquetes huérfanos: $orphans\e[0m"
        echo -e "\n\e[36mℹ  Listado de huérfanos:\e[0m"
        pacman -Qdt
        
        echo -e "\n\e[1;34mOpciones:\e[0m"
        echo "1) Eliminar todos los paquetes huérfanos"
        echo "2) Mostrar información detallada de los huérfanos"
        echo "3) Volver al menú de limpieza"
        
        read -p "Seleccione una opción [1-3]: " orphan_option
        
        case $orphan_option in
            1)
                echo -e "\e[34mℹ  Eliminando paquetes huérfanos...\e[0m"
                sudo pacman -Rns $(pacman -Qdtq) --noconfirm
                echo -e "\e[32m✔  Paquetes huérfanos eliminados.\e[0m"
                ;;
            2)
                echo -e "\e[34mℹ  Información detallada:\e[0m"
                pacman -Qi $(pacman -Qdtq)
                ;;
            3)
                return
                ;;
            *)
                echo -e "\e[31m✖  Opción inválida.\e[0m"
                ;;
        esac
    else
        echo -e "\e[32m✔  No se encontraron paquetes huérfanos.\e[0m"
    fi
}

function ver_espacio_disco() {
    # Función para mostrar información de espacio en disco
    echo -e "\n\e[1;33m[Información de Espacio en Disco]\e[0m"
    
    echo -e "\n\e[36mℹ  Espacio disponible en el sistema:\e[0m"
    df -h --output=source,size,used,avail,pcent,target | grep -vE '^(tmpfs|udev)'
    
    echo -e "\n\e[36mℹ  Los 10 archivos más grandes en la caché:\e[0m"
    du -h /var/cache/pacman/pkg/* 2>/dev/null | sort -hr | head -n 10 | awk '{print "• " $2 " (" $1 ")"}'
    
    echo -e "\n\e[36mℹ  Espacio por particiones principales:\e[0m"
    df -h / /home /var
}

###################################
function actualizar() {
    # Función principal para actualizar paquetes
    clear
    echo -e "\e[1;34m=== Verificando actualizaciones en Arch Linux ===\e[0m"
    
    # --- Actualizaciones con pacman ---
    echo -e "\n\e[1;33m[pacman]\e[0m Verificando paquetes..."
    sudo pacman -Sy
    updates=$(pacman -Qu | wc -l)
    
    if [ "$updates" -eq 0 ]; then
        echo -e "\e[32m✔  No hay actualizaciones disponibles para paquetes oficiales.\e[0m"
    else
        echo -e "\e[33m⚠  Actualizaciones pendientes (pacman): $updates\e[0m"
        echo -e "\n\e[36mPaquetes para actualizar:\e[0m"
        pacman -Qu | awk '{print "• " $1 " (" $2 " -> " $4 ")"}'
        
        read -p "¿Deseas instalar estas actualizaciones? [S/n]: " respuesta
        
        if [[ "$respuesta" =~ ^[Ss]$ ]] || [[ -z "$respuesta" ]]; then
            echo -e "\n\e[34mInstalando actualizaciones con pacman...\e[0m"
            sudo pacman -Su --noconfirm
            echo -e "\e[32m✔  ¡Actualizaciones de pacman instaladas!\e[0m"
        else
            echo -e "\e[31m✖  Saltando instalación de actualizaciones de pacman.\e[0m"
        fi
    fi
    
    # --- Actualizaciones con yay (AUR) ---
    echo -e "\n\e[1;33m[yay (AUR)]\e[0m Verificando paquetes..."
    
    if ! command -v yay &> /dev/null; then
        echo -e "\e[36mℹ yay no está instalado. No se verificará AUR.\e[0m"
    else
        aur_updates=$(yay -Qu | grep -v "\[instalado\]" | wc -l)
        
        if [ "$aur_updates" -eq 0 ]; then
            echo -e "\e[32m✔  No hay actualizaciones disponibles en AUR.\e[0m"
        else
            echo -e "\e[33m⚠  Actualizaciones pendientes (AUR): $aur_updates\e[0m"
            echo -e "\n\e[36mPaquetes para actualizar:\e[0m"
            yay -Qu | grep -v "\[instalado\]" | awk '{print "• " $1 " (" $2 " -> " $4 ")"}'
            
            read -p "¿Deseas instalar estas actualizaciones de AUR? [S/n]: " respuesta
            
            if [[ "$respuesta" =~ ^[Ss]$ ]] || [[ -z "$respuesta" ]]; then
                echo -e "\n\e[34mInstalando actualizaciones de AUR...\e[0m"
                yay -Su --aur --noconfirm
                echo -e "\e[32m✔  ¡Actualizaciones de AUR instaladas!\e[0m"
            else
                echo -e "\e[31m✖  Saltando instalación de actualizaciones de AUR.\e[0m"
            fi
        fi
    fi
}

